{"version":3,"sources":["components/History/index.js","actions/historyActions.js","actions/types.js","containers/historyContainer.js","components/Form/index.js","actions/formActions.js","containers/formContainer.js","components/Weather/index.js","containers/weatherContainer.js","components/Day/index.js","components/Forecast/index.js","containers/forecastContainer.js","components/NotFound/index.js","components/Logo/index.js","App.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["History","handleClick","e","preventDefault","cityId","currentTarget","getAttribute","_this","props","chooseHistory","_this2","this","links","data","map","city","react_default","a","createElement","react_router_dom","to","key","id","onClick","value","className","Component","type","payload","resetHistory","connect","state","dispatch","bindActionCreators","Form","handleSubmitForm","getWeatherData","handleChangeCityName","changeCityName","target","_callee","API_URL","response","transformedData","regenerator_default","wrap","_context","prev","next","concat","enteredCityName","fetch","sent","json","Date","now","location","name","country","condition","current","text","conditionIcon","icon","temp","temp_c","forecastDay","forecast","forecastday","error","fetchData","t0","stop","action","onSubmit","placeholder","onChange","disabled","historyContainer","newCityName","Weather","historyCityId","historyCity","filter","item","length","Fragment","src","alt","React","Day","date","day","mintemp_c","maxtemp_c","Forecast","daysForecast","index","components_Day","NotFound","Logo","App","components_Logo","react_router","path","component","exact","initialState","rootReducer","arguments","undefined","Object","objectSpread","toConsumableArray","slice","push","store","createStore","composeWithDevTools","Boolean","window","hostname","match","render","basename","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.285705b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './styles.css';\r\n\r\nclass History extends Component {\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        const cityId = e.currentTarget.getAttribute('id');\r\n        this.props.chooseHistory(cityId);\r\n    }\r\n\r\n    render() {\r\n        const links = this.props.data.map(city =>\r\n            <Link\r\n                to=\"/\"\r\n                key={city.id}\r\n                data={city}\r\n                onClick={this.handleClick}\r\n                value={city.city}\r\n                id={city.id}\r\n            >\r\n                {city.city}\r\n            </Link>\r\n        );\r\n\r\n        return (\r\n            <div className=\"app__history history\">\r\n                {links}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default History;","import { CHOOSE_HISTORY, RESET_HISTORY } from './types';\r\n\r\nexport const chooseHistory = cityId => ({\r\n    type: CHOOSE_HISTORY,\r\n    payload: cityId\r\n});\r\n\r\nexport const resetHistory = () => ({\r\n    type: RESET_HISTORY,\r\n    payload: ''\r\n});","export const CHANGED_CITY_NAME = 'CHANGED_CITY_NAME';\r\nexport const FETCHED_DATA = 'FETCHED_DATA';\r\nexport const CHOOSE_HISTORY = 'CHOOSE_HISTORY';\r\nexport const RESET_HISTORY = 'RESET_HISTORY';\r\n","import { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport History from '../components/History';\r\nimport { chooseHistory } from '../actions/historyActions';\r\n\r\nconst mapStateToProps = state => ({\r\n    data: state.city\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    chooseHistory: bindActionCreators(chooseHistory, dispatch)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(History);\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport History from '../../containers/historyContainer';\r\nimport './styles.css';\r\n\r\nclass Form extends Component {\r\n    handleSubmitForm = e => {\r\n        e.preventDefault();\r\n        this.props.resetHistory();\r\n        this.getWeatherData();\r\n    };\r\n\r\n    handleChangeCityName = e => {\r\n        this.props.changeCityName(e.target.value);\r\n    };\r\n\r\n    getWeatherData = async () => {\r\n        try {\r\n            const daysOfForecast = 3;\r\n            const API_KEY = 'b7a955a0c43d4bc482261947191104';\r\n            const API_URL = `http://api.apixu.com/v1/forecast.json?key=${API_KEY}&q=${this.props.enteredCityName}&days=${daysOfForecast}`;\r\n\r\n            const response = await fetch(API_URL);\r\n            const data = await response.json();\r\n\r\n            const transformedData = {\r\n                id: Date.now(),\r\n                city: data.location.name,\r\n                country: data.location.country,\r\n                condition: data.current.condition.text,\r\n                conditionIcon: data.current.condition.icon,\r\n                temp: data.current.temp_c,\r\n                forecastDay: data.forecast.forecastday,\r\n                error: false\r\n            };\r\n            this.props.fetchData(transformedData);\r\n        } catch(error) {\r\n            this.props.fetchData({error: true});\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form action=\"\" className=\"app__form\" onSubmit={this.handleSubmitForm}>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"app__search\"\r\n                    placeholder=\"Enter City Name\"\r\n                    value={this.props.enteredCityName}\r\n                    onChange={this.handleChangeCityName}\r\n                />\r\n                <button\r\n                    className={!this.props.enteredCityName ? 'app__submit app__submit-inactive' : 'app__submit'}\r\n                    disabled={!this.props.enteredCityName ? true : false}\r\n                >\r\n                    Get Forecast\r\n                </button>\r\n                <History />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import { CHANGED_CITY_NAME, FETCHED_DATA } from './types';\r\n\r\nexport const changeCityName = newCityName => ({\r\n    type: CHANGED_CITY_NAME,\r\n    payload: newCityName\r\n});\r\n\r\nexport const fetchData = data => ({\r\n    type: FETCHED_DATA,\r\n    payload: data\r\n});","import { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport Form from '../components/Form';\r\nimport { changeCityName, fetchData } from '../actions/formActions';\r\nimport { resetHistory } from '../actions/historyActions';\r\n\r\nconst mapStateToProps = state => ({\r\n    enteredCityName: state.enteredCityName,\r\n    city: state.city\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    changeCityName: bindActionCreators(changeCityName, dispatch),\r\n    fetchData: bindActionCreators(fetchData, dispatch),\r\n    resetHistory: bindActionCreators(resetHistory, dispatch)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './styles.css';\r\n\r\nclass Weather extends React.Component {\r\n    render() {\r\n        const historyCityId = this.props.historyCityId;\r\n        let historyCity = this.props.data.filter(item => item.id === +historyCityId);\r\n\r\n        const city = historyCity.length ? historyCity[0] : this.props.data[this.props.data.length - 1];\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    !this.props.error ?\r\n                        city && <div className=\"app__weather weather\">\r\n                            <h1 className=\"weather__title\">Current weather in {city.city}</h1>\r\n                            <p><img src={`${city.conditionIcon}`} alt={`${city.condition}`} /></p>\r\n                            <p>{city.condition}</p>\r\n                            <p className=\"weather__condition\">{city.temp}&#8451;</p>\r\n                            <Link to=\"/details\" className=\"weather__forecast\">Get Forecast for 3 days</Link>\r\n                        </div>\r\n                        : <p className=\"app__error\">Incorrect City Name :(</p>\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport Weather from '../components/Weather';\r\nimport { resetHistory } from '../actions/historyActions';\r\n\r\nconst mapStateToProps = state => ({\r\n    data: state.city,\r\n    historyCityId: state.historyCityId,\r\n    error: state.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    resetHistory: bindActionCreators(resetHistory, dispatch)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst Day = (props) => (\r\n    <div className=\"day\">\r\n        <p className=\"day__date\">{props.data.date}</p>\r\n        <p><img src={`${props.data.day.condition.icon}`} alt={`${props.data.day.condition.text}`} /></p>\r\n        <p>{props.data.day.condition.text}</p>\r\n        <p>Min temp: {props.data.day.mintemp_c}&#8451;</p>\r\n        <p>Max temp: {props.data.day.maxtemp_c}&#8451;</p>\r\n    </div>\r\n);\r\n\r\nexport default Day;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Day from '../Day';\r\nimport './styles.css';\r\n\r\nclass Forecast extends Component {\r\n    render() {\r\n        const historyCityId = this.props.historyCityId;\r\n        let historyCity = this.props.data.filter(item => item.id === +historyCityId);\r\n\r\n\r\n        const city = historyCity.length ? historyCity[0] : this.props.data[this.props.data.length - 1];\r\n\r\n\r\n        const daysForecast = city.forecastDay.map((day, index) => <Day data={day} key={index} />);\r\n\r\n        return (\r\n            <div className=\"forecast\">\r\n                <h1 className=\"forecast__title\">Weather Forecast for {city.city}</h1>\r\n                <div className=\"forecast__days\">\r\n                    {daysForecast}\r\n                </div>\r\n                <Link to=\"/\" className=\"forecast__link-back\">Back</Link>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Forecast;","import { connect } from 'react-redux';\r\n\r\nimport Forecast from '../components/Forecast';\r\n\r\nconst mapStateToProps = state => ({\r\n    data: state.city,\r\n    historyCityId: state.historyCityId\r\n});\r\n\r\nexport default connect(mapStateToProps)(Forecast);\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n    <div className=\"day\">\r\n        <p>Sorry, page not found :(</p>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst Logo = () => (\r\n    <div className=\"app__logo logo\">\r\n        Weather Forecast\r\n        <div className=\"logo__icons\">\r\n            <i className=\"fas fa-cloud\"></i>\r\n            <i className=\"fas fa-bolt\"></i>\r\n            <i className=\"fas fa-sun\"></i>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Logo;","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.css';\r\nimport Form from './containers/formContainer';\r\nimport Weather from './containers/weatherContainer';\r\nimport Forecast from './containers/forecastContainer';\r\nimport NotFound from './components/NotFound';\r\nimport Logo from './components/Logo';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"app__inner\">\r\n                    <Logo />\r\n                    <div className=\"app__content\">\r\n                        <Route path=\"/\" component={Form} exact />\r\n                        <Switch>\r\n                            <Route path=\"/\" component={Weather} exact />\r\n                            <Route path=\"/details\" component={Forecast} />\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { CHANGED_CITY_NAME, FETCHED_DATA, CHOOSE_HISTORY, RESET_HISTORY } from '../actions/types';\r\n\r\nconst initialState = {\r\n    enteredCityName: '',\r\n    city: [],\r\n    historyCityId: '',\r\n    error: false\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGED_CITY_NAME:\r\n            return {\r\n                ...state,\r\n                enteredCityName: action.payload\r\n            };\r\n        case FETCHED_DATA:\r\n            if (action.payload.error) {\r\n                return {...state, error: action.payload.error};\r\n            } else {\r\n                let city = null;\r\n                if (state.city.length < 4) {\r\n                    city = [...state.city, action.payload];\r\n                } else {\r\n                    city = state.city.slice(1);\r\n                    city.push(action.payload);\r\n                }\r\n                return {\r\n                    ...state,\r\n                    city: city,\r\n                    error: false\r\n                };\r\n            }\r\n        case CHOOSE_HISTORY:\r\n            return {\r\n                ...state,\r\n                historyCityId: action.payload,\r\n                error: false\r\n            };\r\n        case RESET_HISTORY:\r\n            return {\r\n                ...state,\r\n                historyCityId: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(\r\n    <BrowserRouter basename=\"/weather_forecast/\">\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}